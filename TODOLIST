	TODOLIST

NOTE: this is mostly a personal document that I use to keep track of what I'm
currently doing and what I have planned, don't expect any correct or important
information in here.

Currently the kernel doesn't do much other than boot and print some messages to
the QEMU debugcon port (port 0xe9).

Planned features, in rough order of implementation:

- 'include/davix/context.h', tracking the current execution context (such as if
  we are running at task/IRQ/NMI level)

- Local APIC interrupts (APIC timer)

- Very simple RR-style task scheduler

- SMP bootup (remember to shut down other CPUs on kernel panic)

- Longterm: Make printk NMI-safe
  - In printk_emit_message(), disable IRQs when printing
  - If during NMI, store the message to a per-CPU message buffer and signal a
    self-IPI (which will be handled the next time IRQs are enabled after
    returning from NMI context).

- Longterm: Implement printk to a graphical console
  - This will require writing a tty driver that can handle ANSI escape codes.
  - Probably leave this to userspace.

- Longterm: Userspace
  - Start out very basic, for example by mapping the initrd at a fixed address
    and jumping to it.
